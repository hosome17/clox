// (-1 + 2) * 3 - -4

// !(5 - 4 > 3 * 2 == !nil)

// "abc" == "abc"

// "a" + "bc"

// print 2 * (1 + 3);
// print "hello world";

// var breakfast;
// var beverage = "milk";
// breakfast = "bread with " + beverage;
// print breakfast;

// var a = "global";
// {
//     print a; // global
//     var a = "local";
//     print a; // local
// }
// print a; // global

// if (true) {
//     print "true";
// } else {
//     print "false";
// }

// if (false) {
//     print "false";
// } else {
//     print "true";
// }

// if (false and 2 > 1) {
//     print "a";
// } else {
//     print "a'";
// }

// if (true or 2 >= 1) {
//     print "b";
// } else {
//     print "b'";
// }

// if (true and 2 > 1) {
//     print "c";
// } else {
//     print "c'";
// }

// var i = 0;

// while (i < 5) {
//     print i;
//     i = i + 1;
// }

// for (var i = 0; i < 5; i = i + 1) {
//     print i;
// }

// fun thisIsAFunction() {
//     print "this is a function";
// }

// print thisIsAFunction;

// fun a() { b(); }
// fun b() { c(); }
// fun c() {
//   c("too", "many");
// }

// a();


// fun fib(n) {
//   if (n < 2) return n;
//   return fib(n - 2) + fib(n - 1);
// }

// var start = clock();
// print fib(15);
// print clock() - start;

// var x = "global";
// fun outer() {
//   var x = "outer";
//   fun inner() {
//     print x;
//   }
//   inner();
// }
// outer();

// fun outer() {
//   var x = "outside";
//   fun inner() {
//     print x;
//   }
//   inner();
// }
// outer();

// fun outer() {
//   var x = "outside";
//   fun inner() {
//     print x;
//   }

//   return inner;
// }

// var closure = outer();
// closure();

// class Brioche {}
// print Brioche;
// print Brioche();

// class Pair {}

// var pair = Pair();
// pair.first = 1;
// pair.second = 2;
// print pair.first + pair.second; // 3.
// print hasField(pair, "first"); // true.
// print hasField(pair, "third"); // false.

// class Scone {
//   topping(first, second) {
//     print "scone with " + first + " and " + second;
//   }
// }

// var scone = Scone();
// scone.topping("berries", "cream");

// class Nested {
//   method() {
//     fun function() {
//       print this;
//     }

//     function();
//   }
// }

// Nested().method();

// print this; // At top level.

// fun notMethod() {
//   print this; // In a function.
// }

// class CoffeeMaker {
//   init(coffee) {
//     this.coffee = coffee;
//   }

//   brew() {
//     print "Enjoy your cup of " + this.coffee;

//     // No reusing the grounds!
//     this.coffee = nil;
//   }
// }

// var maker = CoffeeMaker("coffee and chicory");
// maker.brew();

// class Oops {
//   init() {
//     fun f() {
//       print "not a method";
//     }

//     this.field = f;
//   }
// }

// var oops = Oops();
// oops.field();

// class A {
//   method() {
//     print "A method";
//   }
// }

// class B < A {
//   method() {
//     print "B method";
//   }

//   test() {
//     super.method();
//   }
// }

// class C < B {}

// C().test(); // "A method".

class A {
  method() {
    print "A";
  }
}

class B < A {
  method() {
    var closure = super.method;
    closure(); // Prints "A".
  }
}

B().method();
